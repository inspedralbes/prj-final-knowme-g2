# Podem crear cadascuna de les imatges per a la nostra aplicació 
# a partir del Dockerfile que té cada una de les carpetes
# o bé amb compose aixecar-los tots de cop i que facin referencina
# al codi que tenim just en aquest moment.

# Recordeu que si creem les imatges, el codi no s'actualitza fins
# que no tornem a crear la imatge. Els fitxers "Dockerfile" copien
# a dins de la imatge el codi font corresponent. 
# Per això, si volem que s'actualitzi
# cada cop que engeguem el contenidor, hem de fer servir aquest compose
# que monta el codi de la nostra aplicació com un volum per a cadascuna de les imatges


services:

# Servidor node que aixeca un WebSocker al prt 8080
# el codi està a la carpeta "node" i s'executa amb "npm start"
# S'ha de fer un npm install per instal·lar les dependències ABANS
# d'engegar-ho tot
# El Dockerfile és totalment autocontingut
  # node:
  #   image: node:20-buster-slim
  #   volumes:
  #     - ./node:/home/node/app
  #   working_dir: /home/node/app
  #   command: bash -c  "npm install && npm start" 
  #   ports:
  #     - 8080:8080


# Servidor de node que aixeca un servidor al port 4321
# Serveix els fitxers de la carpeta "front" 

  

# Base de dades MySQL (db)
# anomeneu-la com vulgueu, però recordeu que ha de coincidir amb el nom
# que poseu a la configuració de la connexió de l'aplicació (i el depends_on de l'adminer)
# Crearà una carpeta "./mysql_data" on guardarà les dades de la base de dades
# Si esborreu la carpeta, la BBDD estarà buida i podreu començar des de 0 
# També crearà una BBBDD "persones" pq. la imatge de mysql executa els fitxers
# que hi hagi a la carpeta "docker-entrypoint-initdb.d" al primer inici
  db:
    image: mysql:8.2.0
    container_name: db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: persones
      MYSQL_USER: user
      MYSQL_PASSWORD: user
    ports:
      - 3306:3306
    volumes:
      # Per guardar les dades de forma persistent
      - ./mysql/mysql_data:/var/lib/mysql
      # Per crear algunes taules al primer inici
      - ./mysql/dades.sql:/docker-entrypoint-initdb.d/dades.sql      
  

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    links:
      - db
    depends_on: 
      - db 


  web:
    build: 
      dockerfile: ./apache.DockerFile
      context: ./sites-available
    container_name: docker-php
    ports:
      - "80:80"
      - "8000:8000"
    volumes:
      - ./laravel:/var/www/html/
    depends_on:
      - db
    working_dir: /var/www/html/


  front:
    image: node:20-buster-slim
    volumes:
      - ./front:/home/node/app
    working_dir: /home/node/app
    ports:
      - 4321:4321
    command: bash -c  "npm install && npm run dev -- --host 0.0.0.0"
    # -- --host 0.0.0.0
    depends_on:
      - web


  composer.test:
    image: composer/composer
    links:
      - db
    ports:
      - "9001:9000"
    volumes:
      - "./laravel:/composer"
    container_name: composer.test
    working_dir: /composer
    command: bash -c "composer install"
  